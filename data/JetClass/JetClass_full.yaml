selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

treename:
   Events;1

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   #d_encoding : {
   #    'L1PuppiCands_charge': {-999.0: 0,
   #                            -1.0: 1,
   #                            0.0: 2,
   #                            1.0: 3},
   #    'L1PuppiCands_pdgId': {-999.0: 0,
   #                           -211.0: 1,
   #                           -130.0: 2,
   #                           -22.0: 3,
   #                           -13.0: 4,
   #                           -11.0: 5,
   #                           11.0: 5,
   #                           13.0: 4,
   #                           22.0: 3,
   #                           130.0: 2,
   #                           211.0: 1}}
   #pdgID : np.vectorize(d_encoding['L1PuppiCands_pdgId'].__getitem__)(to_np_array(tree['L1PuppiCands_pdgId'], maxN=maxNPuppi, pad=-999.astype(float))
   #charge : np.vectorize(d_encoding['L1PuppiCands_charge'].__getitem__)(to_np_array(tree['L1PuppiCands_charge'], maxN=maxNPuppi, pad=-999.astype(float))
   px : L1PuppiCands_pt * np.cos(L1PuppiCands_phi)
   py : L1PuppiCands_pt * np.sin(L1PuppiCands_phi)
   pz : L1PuppiCands_pt * np.sinh(L1PuppiCands_eta)
   energy : np.sqrt(px**2 + py**2 + pz**2)
   part_mask : ak.ones_like(L1PuppiCands_pt)
   true_px : genMet_pt * np.cos(genMet_phi)
   true_py : genMet_pt * np.sin(genMet_phi)
   true_pxpy: np.stack((true_px, true_py),axis=-1)
   puppi_px : np.sum(px,axis=1)
   puppi_py : np.sum(py,axis=1)
   puppi_pxpy: np.stack((puppi_px, puppi_py), axis=-1)
preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pf_points:
      length: 128
      pad_mode: wrap
      vars: 
         - [L1PuppiCands_eta, null, null, null, null]
         - [L1PuppiCands_phi, null, null, null, null]
   pf_features:
      length: 128
      pad_mode: wrap
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [L1PuppiCands_pt, null, null, null, null]  #clip_max(500)
         - [L1PuppiCands_eta, null, null, null, null]
         - [L1PuppiCands_phi, null, null, null, null]
         - [L1PuppiCands_puppiWeight, null, null, null, null]
         - [L1PuppiCands_pdgId, null, null, null, null]
         - [L1PuppiCands_charge, null, null, null, null]
   pf_vectors:
      length: 128
      pad_mode: wrap
      vars: 
         - [px, null, null, null, null]
         - [py, null, null, null, null]
         - [pz, null, null, null, null]
         - [energy, null, null, null, null]
   pf_mask:
      length: 128
      pad_mode: constant
      vars: 
         - [part_mask, null, null, null, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: custom
   value:
      truth_pxpy: true_pxpy
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)   - jet_tau2

observers:
   - puppi_pxpy

weights:
